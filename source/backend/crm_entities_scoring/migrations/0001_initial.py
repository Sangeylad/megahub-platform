# Generated by Django 4.2.23 on 2025-07-22 08:43

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('brands_core', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EntityScore',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Entité active dans le CRM')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('entity_type', models.CharField(choices=[('account', 'Compte'), ('contact', 'Contact'), ('opportunity', 'Opportunité')], help_text="Type d'entité scorée", max_length=15)),
                ('entity_id', models.UUIDField(help_text="ID de l'entité scorée")),
                ('score_type', models.CharField(choices=[('health', 'Score Santé'), ('engagement', 'Score Engagement'), ('propensity', 'Propension Achat'), ('churn_risk', 'Risque Churn'), ('lead_quality', 'Qualité Lead'), ('upsell_potential', 'Potentiel Upsell'), ('influence', 'Score Influence'), ('decision_power', 'Pouvoir Décision')], help_text='Type de score', max_length=20)),
                ('score_value', models.DecimalField(decimal_places=2, help_text='Valeur du score (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('calculation_method', models.CharField(choices=[('manual', 'Manuel'), ('rule_based', 'Règles Métier'), ('ml_model', 'Modèle ML'), ('weighted_average', 'Moyenne Pondérée'), ('composite', 'Score Composite')], help_text='Méthode de calcul', max_length=20)),
                ('model_version', models.CharField(blank=True, help_text='Version du modèle (si ML)', max_length=20)),
                ('calculation_details', models.JSONField(blank=True, default=dict, help_text='Détails du calcul en JSON')),
                ('confidence_level', models.DecimalField(blank=True, decimal_places=2, help_text='Niveau de confiance (0-1)', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('previous_score', models.DecimalField(blank=True, decimal_places=2, help_text='Score précédent', max_digits=5, null=True)),
                ('score_change', models.DecimalField(blank=True, decimal_places=2, help_text='Variation du score', max_digits=6, null=True)),
                ('calculated_at', models.DateTimeField(auto_now=True, help_text='Date de calcul')),
                ('valid_until', models.DateTimeField(blank=True, help_text='Validité du score', null=True)),
                ('requires_attention', models.BooleanField(default=False, help_text='Score nécessite attention')),
                ('alert_threshold_reached', models.BooleanField(default=False, help_text="Seuil d'alerte atteint")),
                ('brand', models.ForeignKey(help_text='Brand gestionnaire de cette entité', on_delete=django.db.models.deletion.CASCADE, to='brands_core.brand')),
                ('owner', models.ForeignKey(help_text='Propriétaire/responsable de cette entité', on_delete=django.db.models.deletion.CASCADE, related_name='owned_%(class)s_entities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Score Entité',
                'verbose_name_plural': 'Scores Entités',
                'db_table': 'crm_entity_score',
                'ordering': ['-calculated_at'],
            },
        ),
        migrations.CreateModel(
            name='ScoreRule',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nom de la règle', max_length=100)),
                ('score_type', models.CharField(choices=[('health', 'Score Santé'), ('engagement', 'Score Engagement'), ('propensity', 'Propension Achat'), ('churn_risk', 'Risque Churn'), ('lead_quality', 'Qualité Lead'), ('upsell_potential', 'Potentiel Upsell'), ('influence', 'Score Influence'), ('decision_power', 'Pouvoir Décision')], help_text='Type de score concerné', max_length=20)),
                ('rule_type', models.CharField(choices=[('threshold', 'Seuil'), ('formula', 'Formule'), ('condition', 'Condition'), ('weight', 'Pondération')], help_text='Type de règle', max_length=15)),
                ('condition', models.TextField(help_text='Condition/formule de la règle')),
                ('weight', models.DecimalField(decimal_places=2, default=1.0, help_text='Poids de la règle', max_digits=4)),
                ('is_active', models.BooleanField(default=True, help_text='Règle active')),
                ('priority', models.IntegerField(default=0, help_text="Priorité d'exécution")),
                ('entity_types', models.JSONField(default=list, help_text="Types d'entités concernés")),
                ('brand', models.ForeignKey(help_text='Brand gestionnaire de cette entité', on_delete=django.db.models.deletion.CASCADE, to='brands_core.brand')),
                ('owner', models.ForeignKey(help_text='Propriétaire/responsable de cette entité', on_delete=django.db.models.deletion.CASCADE, related_name='owned_%(class)s_entities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Règle Score',
                'verbose_name_plural': 'Règles Scores',
                'db_table': 'crm_score_rule',
                'ordering': ['priority', 'name'],
                'indexes': [models.Index(fields=['score_type', 'is_active'], name='crm_score_r_score_t_c40f61_idx'), models.Index(fields=['priority'], name='crm_score_r_priorit_a8f969_idx')],
            },
        ),
        migrations.CreateModel(
            name='ScoreHistory',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Entité active dans le CRM')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('old_value', models.DecimalField(decimal_places=2, help_text='Ancienne valeur', max_digits=5)),
                ('new_value', models.DecimalField(decimal_places=2, help_text='Nouvelle valeur', max_digits=5)),
                ('change_amount', models.DecimalField(decimal_places=2, help_text='Montant du changement', max_digits=6)),
                ('change_percentage', models.DecimalField(decimal_places=2, help_text='Pourcentage de changement', max_digits=6)),
                ('change_reason', models.CharField(blank=True, help_text='Raison du changement', max_length=100)),
                ('triggered_by', models.CharField(blank=True, help_text='Déclenché par (système, utilisateur, etc.)', max_length=50)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Métadonnées du changement')),
                ('brand', models.ForeignKey(help_text='Brand gestionnaire de cette entité', on_delete=django.db.models.deletion.CASCADE, to='brands_core.brand')),
                ('entity_score', models.ForeignKey(help_text='Score principal', on_delete=django.db.models.deletion.CASCADE, related_name='history', to='crm_entities_scoring.entityscore')),
                ('owner', models.ForeignKey(help_text='Propriétaire/responsable de cette entité', on_delete=django.db.models.deletion.CASCADE, related_name='owned_%(class)s_entities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Historique Score',
                'verbose_name_plural': 'Historiques Scores',
                'db_table': 'crm_score_history',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['entity_score', 'created_at'], name='crm_score_h_entity__9ff39e_idx'), models.Index(fields=['change_percentage'], name='crm_score_h_change__d77ded_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='entityscore',
            index=models.Index(fields=['entity_type', 'entity_id'], name='crm_entity__entity__abd364_idx'),
        ),
        migrations.AddIndex(
            model_name='entityscore',
            index=models.Index(fields=['score_type', 'score_value'], name='crm_entity__score_t_52bd42_idx'),
        ),
        migrations.AddIndex(
            model_name='entityscore',
            index=models.Index(fields=['brand', 'requires_attention'], name='crm_entity__brand_i_e9e7b4_idx'),
        ),
        migrations.AddIndex(
            model_name='entityscore',
            index=models.Index(fields=['calculated_at'], name='crm_entity__calcula_ffa3d1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='entityscore',
            unique_together={('entity_type', 'entity_id', 'score_type')},
        ),
    ]
