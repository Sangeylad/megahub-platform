# Generated by Django 4.2.23 on 2025-07-22 08:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('brands_core', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('company_categorization_core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='TriggerWorkflowAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.IntegerField(default=0, help_text="Priorité d'exécution")),
                ('conditions', models.JSONField(blank=True, default=dict, help_text='Conditions supplémentaires')),
                ('delay_minutes', models.IntegerField(default=0, help_text='Délai avant déclenchement (minutes)')),
                ('is_active', models.BooleanField(default=True, help_text='Association active')),
            ],
            options={
                'verbose_name': 'Association Trigger-Workflow',
                'verbose_name_plural': 'Associations Trigger-Workflow',
                'db_table': 'crm_trigger_workflow_association',
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowAction',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_template', models.BooleanField(default=False, help_text='Élément template (réutilisable)')),
                ('version', models.CharField(default='1.0', help_text='Version', max_length=20)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Nom de l'action", max_length=100)),
                ('action_type', models.CharField(choices=[('update_field', 'Mettre à Jour Champ'), ('create_record', 'Créer Enregistrement'), ('send_email', 'Envoyer Email'), ('create_task', 'Créer Tâche'), ('create_activity', 'Créer Activité'), ('assign_user', 'Assigner Utilisateur'), ('change_stage', 'Changer Étape'), ('send_notification', 'Envoyer Notification'), ('webhook_call', 'Appel Webhook'), ('api_request', 'Requête API'), ('run_script', 'Exécuter Script'), ('wait_delay', 'Attendre')], help_text="Type d'action", max_length=20)),
                ('action_config', models.JSONField(default=dict, help_text="Configuration de l'action")),
                ('email_template', models.TextField(blank=True, help_text='Template email')),
                ('notification_message', models.TextField(blank=True, help_text='Message de notification')),
                ('execution_conditions', models.JSONField(blank=True, default=dict, help_text="Conditions d'exécution")),
                ('max_retries', models.IntegerField(default=3, help_text='Nombre max de tentatives')),
                ('retry_delay_minutes', models.IntegerField(default=5, help_text='Délai entre tentatives (minutes)')),
                ('is_active', models.BooleanField(default=True, help_text='Action active')),
                ('execution_count', models.IntegerField(default=0, help_text="Nombre d'exécutions")),
                ('success_count', models.IntegerField(default=0, help_text='Succès')),
                ('failure_count', models.IntegerField(default=0, help_text='Échecs')),
            ],
            options={
                'verbose_name': 'Action Workflow',
                'verbose_name_plural': 'Actions Workflow',
                'db_table': 'crm_workflow_action',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowCondition',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_template', models.BooleanField(default=False, help_text='Élément template (réutilisable)')),
                ('version', models.CharField(default='1.0', help_text='Version', max_length=20)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nom de la condition', max_length=100)),
                ('condition_type', models.CharField(choices=[('field_value', 'Valeur de Champ'), ('field_comparison', 'Comparaison de Champs'), ('date_condition', 'Condition de Date'), ('count_condition', 'Condition de Comptage'), ('relationship_exists', 'Relation Existe'), ('custom_formula', 'Formule Personnalisée'), ('time_based', 'Basé sur le Temps'), ('user_condition', 'Condition Utilisateur')], help_text='Type de condition', max_length=20)),
                ('field_name', models.CharField(help_text='Nom du champ', max_length=100)),
                ('operator', models.CharField(choices=[('equals', 'Égal'), ('not_equals', 'Différent'), ('greater_than', 'Supérieur à'), ('less_than', 'Inférieur à'), ('greater_equal', 'Supérieur ou égal'), ('less_equal', 'Inférieur ou égal'), ('contains', 'Contient'), ('starts_with', 'Commence par'), ('ends_with', 'Finit par'), ('in_list', 'Dans la liste'), ('is_empty', 'Est vide'), ('is_not_empty', "N'est pas vide")], help_text='Opérateur de comparaison', max_length=15)),
                ('expected_value', models.TextField(blank=True, help_text='Valeur attendue')),
                ('condition_logic', models.JSONField(blank=True, default=dict, help_text='Logique de condition complexe')),
                ('custom_formula', models.TextField(blank=True, help_text='Formule personnalisée')),
                ('is_active', models.BooleanField(default=True, help_text='Condition active')),
            ],
            options={
                'verbose_name': 'Condition Workflow',
                'verbose_name_plural': 'Conditions Workflow',
                'db_table': 'crm_workflow_condition',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowTrigger',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_template', models.BooleanField(default=False, help_text='Élément template (réutilisable)')),
                ('version', models.CharField(default='1.0', help_text='Version', max_length=20)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nom du déclencheur', max_length=100)),
                ('trigger_type', models.CharField(choices=[('field_change', 'Changement de Champ'), ('record_created', 'Enregistrement Créé'), ('record_updated', 'Enregistrement Mis à Jour'), ('stage_change', "Changement d'Étape"), ('date_time', 'Date/Heure'), ('activity_completed', 'Activité Terminée'), ('email_interaction', 'Interaction Email'), ('form_submission', 'Soumission Formulaire'), ('api_call', 'Appel API'), ('webhook', 'Webhook')], help_text='Type de déclencheur', max_length=20)),
                ('target_object', models.CharField(help_text='Objet surveillé (Account, Contact, etc.)', max_length=50)),
                ('trigger_conditions', models.JSONField(default=dict, help_text='Conditions de déclenchement')),
                ('max_executions_per_hour', models.IntegerField(blank=True, help_text="Limite d'exécutions par heure", null=True)),
                ('cooldown_minutes', models.IntegerField(default=0, help_text='Délai de refroidissement (minutes)')),
                ('is_active', models.BooleanField(default=True, help_text='Déclencheur actif')),
                ('trigger_count', models.IntegerField(default=0, help_text='Nombre de déclenchements')),
                ('last_triggered_at', models.DateTimeField(blank=True, help_text='Dernier déclenchement', null=True)),
                ('brand', models.ForeignKey(help_text='Brand gestionnaire de cette entité', on_delete=django.db.models.deletion.CASCADE, to='brands_core.brand')),
                ('company_category', models.ForeignKey(blank=True, help_text="Secteur d'application du workflow", null=True, on_delete=django.db.models.deletion.SET_NULL, to='company_categorization_core.industrycategory')),
                ('owner', models.ForeignKey(help_text='Propriétaire/responsable de cette entité', on_delete=django.db.models.deletion.CASCADE, related_name='owned_%(class)s_entities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Déclencheur Workflow',
                'verbose_name_plural': 'Déclencheurs Workflow',
                'db_table': 'crm_workflow_trigger',
                'ordering': ['name'],
            },
        ),
    ]
