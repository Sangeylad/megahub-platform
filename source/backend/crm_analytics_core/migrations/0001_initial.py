# Generated by Django 4.2.23 on 2025-07-22 09:07

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('brands_core', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Chart',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Entité active dans le CRM')),
                ('date_from', models.DateField(help_text='Date de début de la période')),
                ('date_to', models.DateField(help_text='Date de fin de la période')),
                ('granularity', models.CharField(choices=[('hourly', 'Horaire'), ('daily', 'Quotidien'), ('weekly', 'Hebdomadaire'), ('monthly', 'Mensuel'), ('quarterly', 'Trimestriel'), ('yearly', 'Annuel')], default='daily', help_text='Granularité des données', max_length=15)),
                ('last_calculated_at', models.DateTimeField(blank=True, help_text='Dernière mise à jour des calculs', null=True)),
                ('calculation_duration_ms', models.IntegerField(blank=True, help_text='Durée du calcul (millisecondes)', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nom du graphique', max_length=100)),
                ('chart_type', models.CharField(choices=[('line', 'Courbe'), ('area', 'Aires'), ('bar', 'Barres'), ('column', 'Colonnes'), ('pie', 'Camembert'), ('donut', 'Donut'), ('scatter', 'Nuage de Points'), ('bubble', 'Bulles'), ('gauge', 'Jauge'), ('funnel', 'Entonnoir')], help_text='Type de graphique', max_length=15)),
                ('title', models.CharField(help_text='Titre du graphique', max_length=150)),
                ('subtitle', models.CharField(blank=True, help_text='Sous-titre', max_length=200)),
                ('chart_config', models.JSONField(default=dict, help_text='Configuration du graphique')),
                ('color_scheme', models.CharField(default='default', help_text='Schéma de couleurs', max_length=50)),
                ('x_axis_label', models.CharField(blank=True, help_text='Label axe X', max_length=100)),
                ('y_axis_label', models.CharField(blank=True, help_text='Label axe Y', max_length=100)),
                ('is_public', models.BooleanField(default=False, help_text='Graphique public')),
                ('is_template', models.BooleanField(default=False, help_text='Template réutilisable')),
                ('brand', models.ForeignKey(help_text='Brand gestionnaire de cette entité', on_delete=django.db.models.deletion.CASCADE, to='brands_core.brand')),
            ],
            options={
                'verbose_name': 'Graphique Analytics',
                'verbose_name_plural': 'Graphiques Analytics',
                'db_table': 'crm_analytics_chart',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Entité active dans le CRM')),
                ('date_from', models.DateField(help_text='Date de début de la période')),
                ('date_to', models.DateField(help_text='Date de fin de la période')),
                ('granularity', models.CharField(choices=[('hourly', 'Horaire'), ('daily', 'Quotidien'), ('weekly', 'Hebdomadaire'), ('monthly', 'Mensuel'), ('quarterly', 'Trimestriel'), ('yearly', 'Annuel')], default='daily', help_text='Granularité des données', max_length=15)),
                ('last_calculated_at', models.DateTimeField(blank=True, help_text='Dernière mise à jour des calculs', null=True)),
                ('calculation_duration_ms', models.IntegerField(blank=True, help_text='Durée du calcul (millisecondes)', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nom du tableau de bord', max_length=100)),
                ('dashboard_type', models.CharField(choices=[('overview', "Vue d'ensemble"), ('sales', 'Ventes'), ('marketing', 'Marketing'), ('support', 'Support'), ('team_performance', 'Performance Équipe'), ('pipeline', 'Pipeline'), ('forecasting', 'Prévisions'), ('custom', 'Personnalisé')], help_text='Type de tableau de bord', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Description du tableau de bord')),
                ('layout_config', models.JSONField(default=dict, help_text='Configuration de la mise en page')),
                ('refresh_interval_minutes', models.IntegerField(default=60, help_text='Intervalle de rafraîchissement (minutes)')),
                ('is_public', models.BooleanField(default=False, help_text='Dashboard public')),
                ('is_default', models.BooleanField(default=False, help_text='Dashboard par défaut')),
                ('is_template', models.BooleanField(default=False, help_text='Template réutilisable')),
                ('view_count', models.IntegerField(default=0, help_text='Nombre de vues')),
                ('last_viewed_at', models.DateTimeField(blank=True, help_text='Dernière consultation', null=True)),
                ('brand', models.ForeignKey(help_text='Brand gestionnaire de cette entité', on_delete=django.db.models.deletion.CASCADE, to='brands_core.brand')),
                ('owner', models.ForeignKey(help_text='Propriétaire/responsable de cette entité', on_delete=django.db.models.deletion.CASCADE, related_name='owned_%(class)s_entities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dashboard Analytics',
                'verbose_name_plural': 'Dashboards Analytics',
                'db_table': 'crm_analytics_dashboard',
                'ordering': ['-is_default', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('date_from', models.DateField(help_text='Date de début de la période')),
                ('date_to', models.DateField(help_text='Date de fin de la période')),
                ('granularity', models.CharField(choices=[('hourly', 'Horaire'), ('daily', 'Quotidien'), ('weekly', 'Hebdomadaire'), ('monthly', 'Mensuel'), ('quarterly', 'Trimestriel'), ('yearly', 'Annuel')], default='daily', help_text='Granularité des données', max_length=15)),
                ('last_calculated_at', models.DateTimeField(blank=True, help_text='Dernière mise à jour des calculs', null=True)),
                ('calculation_duration_ms', models.IntegerField(blank=True, help_text='Durée du calcul (millisecondes)', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nom de la métrique', max_length=100)),
                ('display_name', models.CharField(help_text="Nom d'affichage", max_length=150)),
                ('metric_type', models.CharField(choices=[('count', 'Comptage'), ('sum', 'Somme'), ('average', 'Moyenne'), ('percentage', 'Pourcentage'), ('ratio', 'Ratio'), ('conversion', 'Taux de Conversion'), ('growth', 'Croissance'), ('velocity', 'Vélocité'), ('custom', 'Personnalisé')], help_text='Type de métrique', max_length=15)),
                ('data_type', models.CharField(choices=[('integer', 'Entier'), ('decimal', 'Décimal'), ('percentage', 'Pourcentage'), ('currency', 'Devise'), ('duration', 'Durée')], help_text='Type de données', max_length=15)),
                ('category', models.CharField(blank=True, help_text='Catégorie de métrique', max_length=50)),
                ('source_model', models.CharField(help_text='Modèle source des données', max_length=100)),
                ('calculation_formula', models.TextField(help_text='Formule de calcul')),
                ('aggregation_field', models.CharField(blank=True, help_text="Champ d'agrégation", max_length=100)),
                ('default_filters', models.JSONField(blank=True, default=dict, help_text='Filtres par défaut')),
                ('current_value', models.DecimalField(blank=True, decimal_places=2, help_text='Valeur actuelle', max_digits=15, null=True)),
                ('previous_value', models.DecimalField(blank=True, decimal_places=2, help_text='Valeur précédente', max_digits=15, null=True)),
                ('change_absolute', models.DecimalField(blank=True, decimal_places=2, help_text='Variation absolue', max_digits=15, null=True)),
                ('change_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Variation en pourcentage', max_digits=8, null=True)),
                ('target_value', models.DecimalField(blank=True, decimal_places=2, help_text='Valeur cible', max_digits=15, null=True)),
                ('warning_threshold', models.DecimalField(blank=True, decimal_places=2, help_text="Seuil d'alerte", max_digits=15, null=True)),
                ('critical_threshold', models.DecimalField(blank=True, decimal_places=2, help_text='Seuil critique', max_digits=15, null=True)),
                ('unit', models.CharField(blank=True, help_text="Unité d'affichage", max_length=20)),
                ('decimal_places', models.IntegerField(default=2, help_text='Nombre de décimales', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(6)])),
                ('format_template', models.CharField(blank=True, help_text='Template de formatage', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Métrique active')),
                ('is_featured', models.BooleanField(default=False, help_text='Métrique mise en avant')),
                ('brand', models.ForeignKey(help_text='Brand gestionnaire de cette entité', on_delete=django.db.models.deletion.CASCADE, to='brands_core.brand')),
                ('owner', models.ForeignKey(help_text='Propriétaire/responsable de cette entité', on_delete=django.db.models.deletion.CASCADE, related_name='owned_%(class)s_entities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Métrique Analytics',
                'verbose_name_plural': 'Métriques Analytics',
                'db_table': 'crm_analytics_metric',
                'ordering': ['-is_featured', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DashboardWidget',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Entité active dans le CRM')),
                ('date_from', models.DateField(help_text='Date de début de la période')),
                ('date_to', models.DateField(help_text='Date de fin de la période')),
                ('granularity', models.CharField(choices=[('hourly', 'Horaire'), ('daily', 'Quotidien'), ('weekly', 'Hebdomadaire'), ('monthly', 'Mensuel'), ('quarterly', 'Trimestriel'), ('yearly', 'Annuel')], default='daily', help_text='Granularité des données', max_length=15)),
                ('last_calculated_at', models.DateTimeField(blank=True, help_text='Dernière mise à jour des calculs', null=True)),
                ('calculation_duration_ms', models.IntegerField(blank=True, help_text='Durée du calcul (millisecondes)', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Titre du widget', max_length=100)),
                ('widget_type', models.CharField(choices=[('metric', 'Métrique Simple'), ('chart_line', 'Graphique Linéaire'), ('chart_bar', 'Graphique Barres'), ('chart_pie', 'Graphique Camembert'), ('chart_donut', 'Graphique Donut'), ('table', 'Tableau'), ('gauge', 'Jauge'), ('kpi_card', 'Carte KPI'), ('leaderboard', 'Classement'), ('timeline', 'Timeline')], help_text='Type de widget', max_length=20)),
                ('position_x', models.IntegerField(default=0, help_text='Position X dans la grille')),
                ('position_y', models.IntegerField(default=0, help_text='Position Y dans la grille')),
                ('width', models.IntegerField(default=4, help_text='Largeur (1-12)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('height', models.IntegerField(default=4, help_text='Hauteur (1-12)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('data_source', models.CharField(help_text='Source des données', max_length=100)),
                ('query_config', models.JSONField(default=dict, help_text='Configuration de la requête')),
                ('chart_config', models.JSONField(default=dict, help_text='Configuration du graphique')),
                ('filters', models.JSONField(blank=True, default=dict, help_text='Filtres appliqués')),
                ('cached_data', models.JSONField(blank=True, default=dict, help_text='Données en cache')),
                ('cache_expires_at', models.DateTimeField(blank=True, help_text='Expiration du cache', null=True)),
                ('is_visible', models.BooleanField(default=True, help_text='Widget visible')),
                ('brand', models.ForeignKey(help_text='Brand gestionnaire de cette entité', on_delete=django.db.models.deletion.CASCADE, to='brands_core.brand')),
                ('dashboard', models.ForeignKey(help_text='Dashboard parent', on_delete=django.db.models.deletion.CASCADE, related_name='widgets', to='crm_analytics_core.dashboard')),
                ('owner', models.ForeignKey(help_text='Propriétaire/responsable de cette entité', on_delete=django.db.models.deletion.CASCADE, related_name='owned_%(class)s_entities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Widget Dashboard',
                'verbose_name_plural': 'Widgets Dashboard',
                'db_table': 'crm_dashboard_widget',
                'ordering': ['dashboard', 'position_y', 'position_x'],
            },
        ),
        migrations.CreateModel(
            name='DashboardShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.CharField(choices=[('view', 'Visualisation'), ('interact', 'Interaction'), ('edit', 'Modification')], default='view', help_text='Niveau de permission', max_length=10)),
                ('shared_date', models.DateTimeField(auto_now_add=True, help_text='Date de partage')),
                ('dashboard', models.ForeignKey(help_text='Dashboard partagé', on_delete=django.db.models.deletion.CASCADE, to='crm_analytics_core.dashboard')),
                ('shared_by', models.ForeignKey(help_text='Partagé par', on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_shares_granted', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='Utilisateur', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Partage Dashboard',
                'verbose_name_plural': 'Partages Dashboard',
                'db_table': 'crm_dashboard_share',
            },
        ),
        migrations.AddField(
            model_name='dashboard',
            name='shared_with',
            field=models.ManyToManyField(blank=True, help_text='Partagé avec', related_name='shared_dashboards', through='crm_analytics_core.DashboardShare', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ChartMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(blank=True, help_text="Nom d'affichage personnalisé", max_length=100)),
                ('color', models.CharField(blank=True, help_text='Couleur hex', max_length=7)),
                ('line_type', models.CharField(blank=True, help_text='Type de ligne', max_length=20)),
                ('y_axis', models.CharField(choices=[('left', 'Gauche'), ('right', 'Droite')], default='left', help_text='Axe Y', max_length=10)),
                ('display_order', models.IntegerField(default=0, help_text="Ordre d'affichage")),
                ('chart', models.ForeignKey(help_text='Graphique', on_delete=django.db.models.deletion.CASCADE, to='crm_analytics_core.chart')),
                ('metric', models.ForeignKey(help_text='Métrique', on_delete=django.db.models.deletion.CASCADE, to='crm_analytics_core.metric')),
            ],
            options={
                'verbose_name': 'Métrique Graphique',
                'verbose_name_plural': 'Métriques Graphiques',
                'db_table': 'crm_chart_metric',
                'ordering': ['display_order'],
            },
        ),
        migrations.AddField(
            model_name='chart',
            name='metrics',
            field=models.ManyToManyField(help_text='Métriques affichées', related_name='charts', through='crm_analytics_core.ChartMetric', to='crm_analytics_core.metric'),
        ),
        migrations.AddField(
            model_name='chart',
            name='owner',
            field=models.ForeignKey(help_text='Propriétaire/responsable de cette entité', on_delete=django.db.models.deletion.CASCADE, related_name='owned_%(class)s_entities', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='MetricHistory',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Entité active dans le CRM')),
                ('date_from', models.DateField(help_text='Date de début de la période')),
                ('date_to', models.DateField(help_text='Date de fin de la période')),
                ('granularity', models.CharField(choices=[('hourly', 'Horaire'), ('daily', 'Quotidien'), ('weekly', 'Hebdomadaire'), ('monthly', 'Mensuel'), ('quarterly', 'Trimestriel'), ('yearly', 'Annuel')], default='daily', help_text='Granularité des données', max_length=15)),
                ('last_calculated_at', models.DateTimeField(blank=True, help_text='Dernière mise à jour des calculs', null=True)),
                ('calculation_duration_ms', models.IntegerField(blank=True, help_text='Durée du calcul (millisecondes)', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('value', models.DecimalField(decimal_places=2, help_text='Valeur de la métrique', max_digits=15)),
                ('recorded_at', models.DateTimeField(help_text="Date d'enregistrement")),
                ('context', models.JSONField(blank=True, default=dict, help_text='Contexte de la mesure')),
                ('brand', models.ForeignKey(help_text='Brand gestionnaire de cette entité', on_delete=django.db.models.deletion.CASCADE, to='brands_core.brand')),
                ('metric', models.ForeignKey(help_text='Métrique parent', on_delete=django.db.models.deletion.CASCADE, related_name='history', to='crm_analytics_core.metric')),
                ('owner', models.ForeignKey(help_text='Propriétaire/responsable de cette entité', on_delete=django.db.models.deletion.CASCADE, related_name='owned_%(class)s_entities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Historique Métrique',
                'verbose_name_plural': 'Historiques Métriques',
                'db_table': 'crm_metric_history',
                'ordering': ['-recorded_at'],
                'indexes': [models.Index(fields=['metric', 'recorded_at'], name='crm_metric__metric__4924b9_idx'), models.Index(fields=['recorded_at'], name='crm_metric__recorde_747529_idx')],
                'unique_together': {('metric', 'recorded_at')},
            },
        ),
        migrations.AddIndex(
            model_name='metric',
            index=models.Index(fields=['metric_type', 'category'], name='crm_analyti_metric__66bc50_idx'),
        ),
        migrations.AddIndex(
            model_name='metric',
            index=models.Index(fields=['source_model'], name='crm_analyti_source__9ad170_idx'),
        ),
        migrations.AddIndex(
            model_name='metric',
            index=models.Index(fields=['is_active', 'is_featured'], name='crm_analyti_is_acti_910e55_idx'),
        ),
        migrations.AddIndex(
            model_name='dashboardwidget',
            index=models.Index(fields=['dashboard', 'is_visible'], name='crm_dashboa_dashboa_b82bfd_idx'),
        ),
        migrations.AddIndex(
            model_name='dashboardwidget',
            index=models.Index(fields=['widget_type'], name='crm_dashboa_widget__84c9a9_idx'),
        ),
        migrations.AddIndex(
            model_name='dashboardwidget',
            index=models.Index(fields=['cache_expires_at'], name='crm_dashboa_cache_e_6670f6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dashboardshare',
            unique_together={('dashboard', 'user')},
        ),
        migrations.AddIndex(
            model_name='dashboard',
            index=models.Index(fields=['dashboard_type', 'is_public'], name='crm_analyti_dashboa_d94144_idx'),
        ),
        migrations.AddIndex(
            model_name='dashboard',
            index=models.Index(fields=['is_default', 'is_template'], name='crm_analyti_is_defa_d83aca_idx'),
        ),
        migrations.AddIndex(
            model_name='dashboard',
            index=models.Index(fields=['last_viewed_at'], name='crm_analyti_last_vi_b62237_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='chartmetric',
            unique_together={('chart', 'metric')},
        ),
        migrations.AddIndex(
            model_name='chart',
            index=models.Index(fields=['chart_type'], name='crm_analyti_chart_t_c3546b_idx'),
        ),
        migrations.AddIndex(
            model_name='chart',
            index=models.Index(fields=['is_public', 'is_template'], name='crm_analyti_is_publ_02e863_idx'),
        ),
    ]
