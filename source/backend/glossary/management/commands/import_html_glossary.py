# backend/glossary/management/commands/import_html_glossary.py
from django.core.management.base import BaseCommand
from django.db import transaction
from django.utils.text import slugify
from glossary.models import TermCategory, Term, TermTranslation, TermRelation
import re


class Command(BaseCommand):
    help = 'Importe les termes depuis l\'ancien glossaire HTML'

    def add_arguments(self, parser):
        parser.add_argument('--dry-run', action='store_true', help='Simulation sans √©criture')
        parser.add_argument('--update', action='store_true', help='Met √† jour les termes existants')

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        update_existing = options['update']
        
        stats = {
            'categories_created': 0,
            'terms_created': 0,
            'terms_updated': 0,
            'translations_created': 0,
            'relations_created': 0
        }
        
        try:
            with transaction.atomic():
                # Cr√©er les cat√©gories
                self.ensure_categories(stats, dry_run)
                
                # Importer les termes hardcod√©s
                self.import_hardcoded_terms(stats, dry_run, update_existing)
                
                # Cr√©er les relations
                self.create_relations(stats, dry_run)
                
                if dry_run:
                    transaction.set_rollback(True)
                    self.stdout.write(self.style.WARNING('\nüîÑ DRY RUN - Aucune donn√©e sauvegard√©e'))
        
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur: {str(e)}'))
            raise
        
        self.print_stats(stats)

    def ensure_categories(self, stats, dry_run):
        """Cr√©e les cat√©gories n√©cessaires"""
        categories_data = [
            # Parents d'abord
            {'slug': 'marketing-digital', 'name': 'Marketing Digital', 'parent': None, 'color': '#FF6B6B'},
            {'slug': 'ecommerce', 'name': 'E-commerce', 'parent': None, 'color': '#4ECDC4'},
            
            # Enfants
            {'slug': 'publicite-payante', 'name': 'Publicit√© Payante', 'parent': 'marketing-digital', 'color': '#45B7D1'},
            {'slug': 'beroas', 'name': 'BEROAS & Rentabilit√©', 'parent': 'ecommerce', 'color': '#667eea'},
            {'slug': 'costs', 'name': 'Co√ªts & Marges', 'parent': 'ecommerce', 'color': '#96CEB4'},
            {'slug': 'marketing', 'name': 'Marketing & Pub', 'parent': 'marketing-digital', 'color': '#FECA57'},
        ]
        
        for cat_data in categories_data:
            if not dry_run:
                parent = None
                if cat_data['parent']:
                    parent = TermCategory.objects.get(slug=cat_data['parent'])
                
                category, created = TermCategory.objects.get_or_create(
                    slug=cat_data['slug'],
                    defaults={
                        'name': cat_data['name'],
                        'parent': parent,
                        'color': cat_data['color'],
                        'is_active': True
                    }
                )
                
                if created:
                    stats['categories_created'] += 1
                    self.stdout.write(f'üìÅ Cat√©gorie cr√©√©e: {cat_data["name"]}')

    def import_hardcoded_terms(self, stats, dry_run, update_existing):
        """Importe les termes hardcod√©s depuis ton HTML"""
        
        terms_data = [
            {
                'slug': 'beroas',
                'category_slug': 'beroas',
                'title': 'BEROAS',
                'definition': 'Budget Efficiency Return On Ad Spend - Indique combien vous pouvez d√©penser en publicit√© pour chaque euro de chiffre d\'affaires tout en restant rentable.',
                'examples': 'BEROAS de 3 = pour 100‚Ç¨ de CA, vous pourrez d√©penser au maximum 33‚Ç¨ en publicit√© tout en conservant votre rentabilit√©.',
                'formula': 'BEROAS = Prix de vente √∑ Marge unitaire',
                'context': 'ecommerce'
            },
            {
                'slug': 'roas',
                'category_slug': 'marketing',
                'title': 'ROAS',
                'definition': 'Return On Ad Spend - Chiffre d\'affaires g√©n√©r√© pour chaque euro investi en publicit√©. Attention : ne tient pas compte des co√ªts !',
                'examples': 'ROAS 4:1 = 4‚Ç¨ de CA pour 1‚Ç¨ de pub. E-commerce rentable : ROAS > 4, SaaS B2B : ROAS > 6.',
                'formula': 'ROAS = Chiffre d\'Affaires Publicitaire / Co√ªt Publicitaire',
                'context': 'ads'
            },
            {
                'slug': 'marge',
                'category_slug': 'costs',
                'title': 'Marge Unitaire',
                'definition': 'B√©n√©fice r√©alis√© sur chaque produit vendu apr√®s d√©duction de tous les co√ªts.',
                'examples': 'Produit √† 30‚Ç¨, co√ªts totaux 18‚Ç¨ ‚Üí Marge = 12‚Ç¨',
                'formula': 'Prix de vente - (Co√ªt produit + Frais livraison + Frais bancaires + Autres co√ªts)',
                'context': 'finance'
            },
            {
                'slug': 'taux-marge',
                'category_slug': 'costs',
                'title': 'Taux de Marge',
                'definition': 'Pourcentage de b√©n√©fice par rapport au prix de vente.',
                'examples': '',
                'formula': '(Marge unitaire √∑ Prix de vente) √ó 100',
                'benchmarks': 'Minimum viable 20%, Id√©al 40%+, Excellent 60%+',
                'context': 'finance'
            },
            {
                'slug': 'becpa',
                'category_slug': 'marketing',
                'title': 'BECPA',
                'definition': 'Break-Even Cost Per Acquisition - Co√ªt maximum que vous pouvez payer pour acqu√©rir un client sans perdre d\'argent.',
                'examples': 'Si votre marge est de 15‚Ç¨, vous ne devez pas d√©penser plus de 15‚Ç¨ pour acqu√©rir un client.',
                'context': 'marketing'
            },
            {
                'slug': 'cpc',
                'category_slug': 'publicite-payante',
                'title': 'CPC',
                'definition': 'Co√ªt Par Clic - Prix que vous payez √† chaque fois que quelqu\'un clique sur votre publicit√©.',
                'examples': '',
                'benchmarks': 'Google Ads 0,50‚Ç¨-2‚Ç¨, Facebook Ads 0,30‚Ç¨-1,50‚Ç¨ selon le secteur',
                'context': 'ads'
            },
            {
                'slug': 'cpm',
                'category_slug': 'publicite-payante',
                'title': 'CPM',
                'definition': 'Co√ªt Pour Mille impressions - Prix pay√© pour 1000 affichages d\'une publicit√©, ind√©pendamment des clics.',
                'examples': 'CPM Facebook : 5-15‚Ç¨, LinkedIn : 8-25‚Ç¨, YouTube : 3-8‚Ç¨. Id√©al pour campagnes de notori√©t√©.',
                'formula': 'CPM = (Budget Campagne / Impressions) √ó 1000',
                'context': 'ads'
            },
            {
                'slug': 'cogs',
                'category_slug': 'ecommerce',
                'title': 'COGS',
                'definition': 'Cost of Goods Sold - Co√ªt direct de production ou d\'achat de votre produit. N\'inclut pas les frais de livraison ou marketing.',
                'examples': 'Prix d\'achat en dropshipping, mati√®res premi√®res en fabrication, licences en digital',
                'context': 'ecommerce'
            },
            {
                'slug': 'taux-conversion',
                'category_slug': 'ecommerce',
                'title': 'Taux de Conversion',
                'definition': 'Pourcentage de visiteurs qui ach√®tent sur votre site.',
                'formula': '(Nombre de commandes √∑ Nombre de visiteurs) √ó 100',
                'benchmarks': 'E-commerce moyen 1-3%, Bon site 3-5%, Excellent 5%+',
                'context': 'ecommerce'
            },
            {
                'slug': 'panier-moyen',
                'category_slug': 'ecommerce',
                'title': 'Panier Moyen',
                'definition': 'Montant moyen d√©pens√© par client lors d\'un achat.',
                'formula': 'Chiffre d\'affaires total √∑ Nombre de commandes',
                'examples': 'Pour l\'augmenter : Vente crois√©e, bundles, frais de port gratuits √† partir d\'un seuil',
                'context': 'ecommerce'
            },
            {
                'slug': 'frais-bancaires',
                'category_slug': 'costs',
                'title': 'Frais Bancaires',
                'definition': 'Commission pr√©lev√©e par votre processeur de paiement sur chaque transaction.',
                'benchmarks': 'Stripe 2,9%, PayPal 3,4%, Banque traditionnelle 1-2%',
                'examples': 'Se calcule g√©n√©ralement sur le montant HT',
                'context': 'finance'
            },
            {
                'slug': 'roi',
                'category_slug': 'marketing',
                'title': 'ROI',
                'definition': 'Return On Investment - Rendement de votre investissement publicitaire. Mesure le profit g√©n√©r√© par rapport √† ce que vous avez investi.',
                'formula': '((Profit - Investissement) √∑ Investissement) √ó 100',
                'examples': 'ROI de 200% = vous gagnez 2‚Ç¨ pour chaque 1‚Ç¨ investi',
                'context': 'marketing'
            },
            {
                'slug': 'ltv',
                'category_slug': 'ecommerce',
                'title': 'LTV',
                'definition': 'LifeTime Value - Valeur totale qu\'un client apporte √† votre entreprise pendant toute sa relation avec vous.',
                'formula': 'Panier moyen √ó Nombre d\'achats par an √ó Dur√©e de vie client',
                'examples': 'SaaS 100‚Ç¨/mois, r√©tention 24 mois : LTV = 2400‚Ç¨. E-commerce : panier moyen 80‚Ç¨ √ó 5 achats/an √ó 3 ans = 1200‚Ç¨.',
                'context': 'ecommerce'
            },
            {
                'slug': 'taux-retour',
                'category_slug': 'ecommerce',
                'title': 'Taux de Retour',
                'definition': 'Pourcentage de commandes retourn√©es par les clients.',
                'benchmarks': 'E-commerce g√©n√©ral 5-15%, Mode 20-30%, √âlectronique 5-10%',
                'examples': 'R√©duit votre marge effective, √† int√©grer dans vos calculs BEROAS',
                'context': 'ecommerce'
            },
            {
                'slug': 'attribution',
                'category_slug': 'marketing',
                'title': 'Attribution',
                'definition': 'M√©thode pour attribuer une vente √† une source publicitaire quand un client interagit avec plusieurs canaux.',
                'examples': 'Premier clic : Attribue √† la premi√®re interaction. Dernier clic : Attribue √† la derni√®re interaction. Lin√©aire : R√©partit le cr√©dit entre tous les touchpoints.',
                'context': 'marketing'
            },
            {
                'slug': 'dropshipping',
                'category_slug': 'ecommerce',
                'title': 'Dropshipping',
                'definition': 'Mod√®le o√π vous vendez des produits sans les stocker. Le fournisseur exp√©die directement au client.',
                'examples': 'Avantages : Pas de stock, investissement minimal. Inconv√©nients : Marges r√©duites, moins de contr√¥le qualit√©.',
                'benchmarks': 'BEROAS typique : 2-3 (marges plus serr√©es que la vente classique)',
                'context': 'ecommerce'
            }
        ]
        
        for term_data in terms_data:
            self.create_or_update_term(term_data, stats, dry_run, update_existing)

    def create_or_update_term(self, data, stats, dry_run, update_existing):
        """Cr√©e ou met √† jour un terme"""
        
        if not dry_run:
            # R√©cup√©rer la cat√©gorie
            try:
                category = TermCategory.objects.get(slug=data['category_slug'])
            except TermCategory.DoesNotExist:
                self.stdout.write(
                    self.style.WARNING(f'Cat√©gorie non trouv√©e: {data["category_slug"]} pour {data["slug"]}')
                )
                return
            
            # Cr√©er/mettre √† jour le terme
            term, created = Term.objects.get_or_create(
                slug=data['slug'],
                defaults={
                    'category': category,
                    'is_essential': True,
                    'difficulty_level': 'beginner',
                    'is_active': True
                }
            )
            
            if created:
                stats['terms_created'] += 1
                action = '‚úÖ Cr√©√©'
            elif update_existing:
                term.category = category
                term.is_essential = True
                term.save()
                stats['terms_updated'] += 1
                action = 'üîÑ Mis √† jour'
            else:
                action = '‚è≠Ô∏è  Ignor√© (existe)'
            
            # Cr√©er/mettre √† jour la traduction
            translation, tr_created = TermTranslation.objects.update_or_create(
                term=term,
                language='fr',
                context=data.get('context', ''),
                defaults={
                    'title': data['title'],
                    'definition': data['definition'],
                    'examples': data.get('examples', ''),
                    'formula': data.get('formula', ''),
                    'benchmarks': data.get('benchmarks', '')
                }
            )
            
            if tr_created:
                stats['translations_created'] += 1
            
            self.stdout.write(f'  {action}: {data["title"]} ({data["slug"]})')
        
        else:
            stats['terms_created'] += 1
            stats['translations_created'] += 1

    def create_relations(self, stats, dry_run):
        """Cr√©e les relations logiques entre termes"""
        
        relations = [
            ('beroas', 'roas', 'related'),
            ('beroas', 'marge', 'related'),
            ('cpc', 'cpm', 'related'),
            ('cpc', 'roas', 'related'),
            ('roas', 'roi', 'related'),
            ('ltv', 'taux-retour', 'related'),
            ('taux-conversion', 'panier-moyen', 'related'),
            ('marge', 'taux-marge', 'related'),
            ('cogs', 'marge', 'related'),
        ]
        
        if not dry_run:
            for from_slug, to_slug, relation_type in relations:
                try:
                    from_term = Term.objects.get(slug=from_slug)
                    to_term = Term.objects.get(slug=to_slug)
                    
                    relation, created = TermRelation.objects.get_or_create(
                        from_term=from_term,
                        to_term=to_term,
                        relation_type=relation_type,
                        defaults={'weight': 5}
                    )
                    
                    if created:
                        stats['relations_created'] += 1
                        
                except Term.DoesNotExist:
                    continue
        else:
            stats['relations_created'] = len(relations)

    def print_stats(self, stats):
        """Affiche le rapport final"""
        self.stdout.write('\n' + '='*60)
        self.stdout.write(self.style.SUCCESS('üìä RAPPORT D\'IMPORT'))
        self.stdout.write(f'üìÅ Cat√©gories cr√©√©es: {stats["categories_created"]}')
        self.stdout.write(f'üìù Termes cr√©√©s: {stats["terms_created"]}')
        self.stdout.write(f'üîÑ Termes mis √† jour: {stats["terms_updated"]}')
        self.stdout.write(f'üåç Traductions cr√©√©es: {stats["translations_created"]}')
        self.stdout.write(f'üîó Relations cr√©√©es: {stats["relations_created"]}')
        self.stdout.write('\n‚úÖ Import termin√© avec succ√®s!')