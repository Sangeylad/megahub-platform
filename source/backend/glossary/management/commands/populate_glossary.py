# backend/glossary/management/commands/populate_glossary.py
from django.core.management.base import BaseCommand
from django.db import transaction
from django.utils.text import slugify
from glossary.models import TermCategory, Term, TermTranslation, TermRelation


class Command(BaseCommand):
    help = 'Peuple le glossaire avec un dataset business complet'

    def add_arguments(self, parser):
        parser.add_argument('--reset', action='store_true', help='Supprime toutes les donn√©es existantes')
        parser.add_argument('--dry-run', action='store_true', help='Simulation sans √©criture')

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        reset = options['reset']
        
        if reset and not dry_run:
            self.stdout.write('üóëÔ∏è  Suppression des donn√©es existantes...')
            TermTranslation.objects.all().delete()
            TermRelation.objects.all().delete()
            Term.objects.all().delete()
            TermCategory.objects.all().delete()
        
        stats = {
            'categories': 0,
            'terms': 0,
            'translations': 0,
            'relations': 0
        }
        
        try:
            with transaction.atomic():
                self.create_categories(stats, dry_run)
                self.create_terms(stats, dry_run)
                self.create_relations(stats, dry_run)
                
                if dry_run:
                    transaction.set_rollback(True)
                    self.stdout.write(self.style.WARNING('\nüîÑ DRY RUN - Aucune donn√©e sauvegard√©e'))
        
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur: {str(e)}'))
            return
        
        # Rapport final
        self.stdout.write('\n' + '='*60)
        self.stdout.write(self.style.SUCCESS('üìä RAPPORT DE CR√âATION'))
        self.stdout.write(f'üìÅ Cat√©gories cr√©√©es: {stats["categories"]}')
        self.stdout.write(f'üìù Termes cr√©√©s: {stats["terms"]}')
        self.stdout.write(f'üåç Traductions cr√©√©es: {stats["translations"]}')
        self.stdout.write(f'üîó Relations cr√©√©es: {stats["relations"]}')
        self.stdout.write('\n‚úÖ Import termin√© avec succ√®s!')

    def create_categories(self, stats, dry_run):
        """Cr√©e la structure des cat√©gories"""
        
        categories_data = [
            # Marketing Digital
            {
                'name': 'Marketing Digital',
                'description': 'Strat√©gies, outils et techniques du marketing num√©rique moderne',
                'color': '#FF6B6B',
                'icon': 'fas fa-bullhorn',
                'children': [
                    {
                        'name': 'SEO & Contenu',
                        'description': 'Optimisation pour moteurs de recherche et cr√©ation de contenu',
                        'color': '#4ECDC4',
                        'icon': 'fas fa-search'
                    },
                    {
                        'name': 'Publicit√© Payante',
                        'description': 'Google Ads, Facebook Ads, programmatique et acquisition payante',
                        'color': '#45B7D1',
                        'icon': 'fas fa-ad'
                    },
                    {
                        'name': 'Marketing Automation',
                        'description': 'Automatisation, email marketing et nurturing de leads',
                        'color': '#96CEB4',
                        'icon': 'fas fa-robot'
                    },
                    {
                        'name': 'Analytics & Data',
                        'description': 'Mesure de performance et analyse de donn√©es marketing',
                        'color': '#FECA57',
                        'icon': 'fas fa-chart-line'
                    }
                ]
            },
            
            # Sales
            {
                'name': 'Sales',
                'description': 'Processus commercial, n√©gociation et gestion de la relation client',
                'color': '#FF9F43',
                'icon': 'fas fa-handshake',
                'children': [
                    {
                        'name': 'Prospection',
                        'description': 'Identification et qualification des prospects',
                        'color': '#F8B500',
                        'icon': 'fas fa-crosshairs'
                    },
                    {
                        'name': 'N√©gociation & Closing',
                        'description': 'Techniques de n√©gociation et finalisation des ventes',
                        'color': '#E55039',
                        'icon': 'fas fa-pen-nib'
                    },
                    {
                        'name': 'CRM & Pipeline',
                        'description': 'Gestion de la relation client et suivi du pipeline commercial',
                        'color': '#3C6382',
                        'icon': 'fas fa-funnel-dollar'
                    }
                ]
            },
            
            # Business & Strategy
            {
                'name': 'Business & Strategy',
                'description': 'Strat√©gie d\'entreprise, finance et management',
                'color': '#6C5CE7',
                'icon': 'fas fa-chess',
                'children': [
                    {
                        'name': 'Analyse Financi√®re',
                        'description': 'M√©triques financi√®res et indicateurs de performance',
                        'color': '#A29BFE',
                        'icon': 'fas fa-calculator'
                    },
                    {
                        'name': 'Strat√©gie d\'Entreprise',
                        'description': 'Planification strat√©gique et d√©veloppement business',
                        'color': '#74B9FF',
                        'icon': 'fas fa-compass'
                    },
                    {
                        'name': 'Management & Leadership',
                        'description': 'Gestion d\'√©quipe et leadership organisationnel',
                        'color': '#00B894',
                        'icon': 'fas fa-users'
                    }
                ]
            },
            
            # Tech & Data
            {
                'name': 'Tech & Data',
                'description': 'Technologies, d√©veloppement et gestion des donn√©es',
                'color': '#2D3436',
                'icon': 'fas fa-code',
                'children': [
                    {
                        'name': 'D√©veloppement Web',
                        'description': 'Technologies web, frameworks et bonnes pratiques',
                        'color': '#636E72',
                        'icon': 'fas fa-laptop-code'
                    },
                    {
                        'name': 'Data Science & BI',
                        'description': 'Science des donn√©es et intelligence business',
                        'color': '#00CEC9',
                        'icon': 'fas fa-database'
                    }
                ]
            }
        ]
        
        for cat_data in categories_data:
            parent = self.create_category(cat_data, None, stats, dry_run)
            
            for child_data in cat_data.get('children', []):
                self.create_category(child_data, parent, stats, dry_run)

    def create_category(self, data, parent, stats, dry_run):
        """Cr√©e une cat√©gorie individuelle"""
        
        slug = slugify(data['name'])
        
        if not dry_run:
            category, created = TermCategory.objects.get_or_create(
                slug=slug,
                defaults={
                    'name': data['name'],
                    'description': data['description'],
                    'parent': parent,
                    'color': data['color'],
                    'icon': data['icon'],
                    'is_active': True
                }
            )
        else:
            created = True
            category = None
        
        if created:
            stats['categories'] += 1
            indent = '  ' if parent else ''
            self.stdout.write(f'{indent}üìÅ {data["name"]}')
        
        return category

    def create_terms(self, stats, dry_run):
        """Cr√©e tous les termes du glossaire"""
        
        terms_data = [
            # Marketing Digital - Base
            {
                'category_path': 'Marketing Digital',
                'slug': 'inbound-marketing',
                'translations': {
                    'fr': {
                        'title': 'Inbound Marketing',
                        'definition': 'Strat√©gie marketing qui consiste √† attirer les clients vers soi plut√¥t que d\'aller les chercher, via du contenu de qualit√© et des exp√©riences personnalis√©es.',
                        'examples': 'Blog SEO, webinaires, ebooks gratuits, newsletters. L\'inbound g√©n√®re 54% plus de leads que l\'outbound traditionnel.',
                        'formula': 'Inbound = Attirer + Convertir + Conclure + Fid√©liser'
                    }
                },
                'is_essential': True,
                'difficulty': 'beginner',
                'context': ''
            },
            {
                'category_path': 'Marketing Digital',
                'slug': 'buyer-persona',
                'translations': {
                    'fr': {
                        'title': 'Buyer Persona',
                        'definition': 'Repr√©sentation semi-fictive du client id√©al bas√©e sur des donn√©es r√©elles et des insights sur les comportements, motivations et objectifs.',
                        'examples': 'Marie, 35 ans, CMO startup, cherche des solutions marketing automation, budget 5-15K‚Ç¨/mois, d√©cide en 2 semaines.',
                        'benchmarks': '71% des entreprises qui d√©passent leurs objectifs de leads utilisent des personas document√©s'
                    }
                },
                'is_essential': True,
                'difficulty': 'beginner'
            },
            
            # SEO & Contenu
            {
                'category_path': 'Marketing Digital > SEO & Contenu',
                'slug': 'seo',
                'translations': {
                    'fr': {
                        'title': 'SEO',
                        'definition': 'Search Engine Optimization - Ensemble de techniques visant √† optimiser la visibilit√© d\'un site web dans les r√©sultats naturels des moteurs de recherche.',
                        'examples': 'Optimiser les balises title, cr√©er du contenu de qualit√©, obtenir des backlinks. Le SEO g√©n√®re 1000%+ de trafic en plus que les r√©seaux sociaux.',
                        'formula': 'SEO = Technique + Contenu + Popularit√© (backlinks)'
                    }
                },
                'is_essential': True,
                'difficulty': 'beginner',
                'context': 'seo'
            },
            {
                'category_path': 'Marketing Digital > SEO & Contenu',
                'slug': 'beroas',
                'translations': {
                    'fr': {
                        'title': 'BEROAS',
                        'definition': 'M√©thode d\'√©valuation de la performance SEO : Bounce rate, Engagement, Reach, Objectives, Actions, Success. Framework pour mesurer l\'efficacit√© globale d\'une strat√©gie SEO.',
                        'examples': 'Site e-commerce : Bounce 35%, Engagement 4min, Reach 50K/mois, Objectifs atteints 80%, Actions optimis√©es, Success = BEROAS 8.5/10',
                        'formula': 'BEROAS = (Bounce + Engagement + Reach + Objectives + Actions + Success) / 6'
                    }
                },
                'is_essential': True,
                'difficulty': 'intermediate',
                'context': 'seo'
            },
            {
                'category_path': 'Marketing Digital > SEO & Contenu',
                'slug': 'serp',
                'translations': {
                    'fr': {
                        'title': 'SERP',
                        'definition': 'Search Engine Results Page - Page de r√©sultats affich√©e par un moteur de recherche en r√©ponse √† une requ√™te utilisateur.',
                        'examples': 'SERP pour "chaussures running" : 10 liens naturels + 4 annonces + images + avis + questions fr√©quentes.',
                        'benchmarks': 'Position 1 : 28.5% de clics, Position 2 : 15.7%, Position 10 : 2.5%'
                    }
                },
                'is_essential': True,
                'difficulty': 'beginner',
                'context': 'seo'
            },
            {
                'category_path': 'Marketing Digital > SEO & Contenu',
                'slug': 'backlink',
                'translations': {
                    'fr': {
                        'title': 'Backlink',
                        'definition': 'Lien entrant pointant vers votre site depuis un autre site web. Facteur de ranking majeur qui transmet de l\'autorit√© et du trafic r√©f√©rent.',
                        'examples': 'Un article de TechCrunch qui cite votre startup avec un lien = backlink DR90. Objectif : 50+ backlinks qualit√©/mois.',
                        'benchmarks': 'Sites top 10 Google ont en moyenne 3.8x plus de backlinks que les positions 11-20'
                    }
                },
                'is_essential': True,
                'difficulty': 'intermediate',
                'context': 'seo'
            },
            
            # Publicit√© Payante
            {
                'category_path': 'Marketing Digital > Publicit√© Payante',
                'slug': 'cpc',
                'translations': {
                    'fr': {
                        'title': 'CPC',
                        'definition': 'Co√ªt Par Clic - Montant pay√© par un annonceur chaque fois qu\'un utilisateur clique sur sa publicit√©.',
                        'examples': 'CPC Google Ads "assurance auto" : 15‚Ç¨, "chaussures" : 1.20‚Ç¨. Budget 1000‚Ç¨ avec CPC 2‚Ç¨ = 500 clics maximum.',
                        'formula': 'CPC = Budget Total / Nombre de Clics'
                    }
                },
                'is_essential': True,
                'difficulty': 'beginner',
                'context': 'ads'
            },
            {
                'category_path': 'Marketing Digital > Publicit√© Payante',
                'slug': 'cpm',
                'translations': {
                    'fr': {
                        'title': 'CPM',
                        'definition': 'Co√ªt Pour Mille impressions - Prix pay√© pour 1000 affichages d\'une publicit√©, ind√©pendamment des clics.',
                        'examples': 'CPM Facebook : 5-15‚Ç¨, LinkedIn : 8-25‚Ç¨, YouTube : 3-8‚Ç¨. Id√©al pour campagnes de notori√©t√© avec audience large.',
                        'formula': 'CPM = (Budget Campagne / Impressions) √ó 1000'
                    }
                },
                'is_essential': True,
                'difficulty': 'beginner',
                'context': 'ads'
            },
            {
                'category_path': 'Marketing Digital > Publicit√© Payante',
                'slug': 'roas',
                'translations': {
                    'fr': {
                        'title': 'ROAS',
                        'definition': 'Return On Ad Spend - Retour sur investissement publicitaire. Mesure le chiffre d\'affaires g√©n√©r√© pour chaque euro d√©pens√© en publicit√©.',
                        'examples': 'ROAS 4:1 = 4‚Ç¨ de CA pour 1‚Ç¨ de pub. E-commerce rentable : ROAS > 4, SaaS B2B : ROAS > 6.',
                        'formula': 'ROAS = Chiffre d\'Affaires Publicitaire / Co√ªt Publicitaire'
                    }
                },
                'is_essential': True,
                'difficulty': 'intermediate',
                'context': 'ads'
            },
            
            # Sales - Prospection
            {
                'category_path': 'Sales > Prospection',
                'slug': 'prospect',
                'translations': {
                    'fr': {
                        'title': 'Prospect',
                        'definition': 'Contact commercial qualifi√© qui pr√©sente un potentiel d\'achat identifi√©, avec un besoin, un budget et un timing d√©finis.',
                        'examples': 'Prospect qualifi√© BANT : Besoin confirm√©, Autorit√© de d√©cision, Budget valid√© 10-50K‚Ç¨, Timing 3 mois.',
                        'benchmarks': 'Taux de conversion lead ‚Üí prospect : 20-30%, prospect ‚Üí client : 15-25%'
                    }
                },
                'is_essential': True,
                'difficulty': 'beginner',
                'context': 'sales'
            },
            {
                'category_path': 'Marketing Digital',
                'slug': 'lead',
                'translations': {
                    'fr': {
                        'title': 'Lead',
                        'definition': 'Contact commercial g√©n√©r√© par le marketing, ayant manifest√© un int√©r√™t mais non encore qualifi√© par l\'√©quipe commerciale.',
                        'examples': 'Lead : t√©l√©charge un ebook, s\'inscrit √† un webinaire. 1000 leads/mois ‚Üí 200 prospects qualifi√©s ‚Üí 30 clients.',
                        'benchmarks': 'Co√ªt moyen lead B2B : 35‚Ç¨, conversion lead-to-customer : 2-5%'
                    }
                },
                'is_essential': True,
                'difficulty': 'beginner',
                'context': 'marketing'
            },
            {
                'category_path': 'Sales > Prospection',
                'slug': 'qualification-bant',
                'translations': {
                    'fr': {
                        'title': 'Qualification BANT',
                        'definition': 'M√©thode de qualification des prospects : Budget, Authority (autorit√©), Need (besoin), Timeline (d√©lai). Framework pour prioriser les opportunit√©s commerciales.',
                        'examples': 'Budget 50K‚Ç¨ ‚úì, DG d√©cideur ‚úì, Besoin CRM confirm√© ‚úì, Timeline 6 mois ‚úì = Prospect hautement qualifi√©.',
                        'benchmarks': 'Prospects qualifi√©s BANT : taux de closing 40-60% vs 5-15% sans qualification'
                    }
                },
                'is_essential': True,
                'difficulty': 'intermediate',
                'context': 'sales'
            },
            
            # CRM & Pipeline
            {
                'category_path': 'Sales > CRM & Pipeline',
                'slug': 'pipeline-commercial',
                'translations': {
                    'fr': {
                        'title': 'Pipeline Commercial',
                        'definition': 'Repr√©sentation visuelle du processus de vente montrant toutes les opportunit√©s commerciales √† diff√©rents stades d\'avancement.',
                        'examples': 'Pipeline SaaS : Prospection (100 opps) ‚Üí Qualification (40) ‚Üí D√©mo (20) ‚Üí N√©gociation (10) ‚Üí Signature (5)',
                        'formula': 'Pr√©vision CA = Œ£(Valeur Opportunit√© √ó Probabilit√© de Closing)'
                    }
                },
                'is_essential': True,
                'difficulty': 'intermediate',
                'context': 'sales'
            },
            {
                'category_path': 'Sales > CRM & Pipeline',
                'slug': 'taux-conversion',
                'translations': {
                    'fr': {
                        'title': 'Taux de Conversion',
                        'definition': 'Pourcentage de prospects qui passent d\'une √©tape √† l\'autre dans le processus de vente, ou qui deviennent clients.',
                        'examples': 'Lead ‚Üí Prospect : 25%, Prospect ‚Üí Opportunity : 40%, Opportunity ‚Üí Client : 20%. Taux global : 2%.',
                        'benchmarks': 'SaaS B2B moyen : 15-20%, E-commerce : 2-3%, Services haut de gamme : 5-10%'
                    }
                },
                'is_essential': True,
                'difficulty': 'beginner',
                'context': 'sales'
            },
            
            # Business & Strategy
            {
                'category_path': 'Business & Strategy > Analyse Financi√®re',
                'slug': 'ltv',
                'translations': {
                    'fr': {
                        'title': 'LTV',
                        'definition': 'Lifetime Value - Valeur totale qu\'un client apporte √† l\'entreprise sur toute la dur√©e de sa relation commerciale.',
                        'examples': 'SaaS 100‚Ç¨/mois, r√©tention 24 mois : LTV = 2400‚Ç¨. E-commerce : panier moyen 80‚Ç¨ √ó 5 achats/an √ó 3 ans = 1200‚Ç¨.',
                        'formula': 'LTV = (Panier Moyen √ó Fr√©quence d\'Achat √ó Dur√©e de Vie Client) - Co√ªts'
                    }
                },
                'is_essential': True,
                'difficulty': 'intermediate',
                'context': 'finance'
            },
            {
                'category_path': 'Business & Strategy > Analyse Financi√®re',
                'slug': 'cac',
                'translations': {
                    'fr': {
                        'title': 'CAC',
                        'definition': 'Customer Acquisition Cost - Co√ªt total pour acqu√©rir un nouveau client, incluant marketing, sales et ressources d√©di√©es.',
                        'examples': 'Budget marketing 50K‚Ç¨/mois, 100 nouveaux clients : CAC = 500‚Ç¨. Objectif : LTV/CAC > 3:1.',
                        'formula': 'CAC = (Co√ªts Marketing + Co√ªts Sales) / Nombre de Nouveaux Clients'
                    }
                },
                'is_essential': True,
                'difficulty': 'intermediate',
                'context': 'finance'
            },
            {
                'category_path': 'Business & Strategy > Analyse Financi√®re',
                'slug': 'mrr',
                'translations': {
                    'fr': {
                        'title': 'MRR',
                        'definition': 'Monthly Recurring Revenue - Revenus r√©currents mensuels pr√©visibles, m√©trique cl√© pour les business models par abonnement.',
                        'examples': '500 clients √ó 99‚Ç¨/mois = 49 500‚Ç¨ MRR. Croissance MRR : +15% m/m = 57K‚Ç¨ le mois suivant.',
                        'formula': 'MRR = Nombre d\'Abonn√©s Actifs √ó Prix Moyen Mensuel'
                    }
                },
                'is_essential': True,
                'difficulty': 'intermediate',
                'context': 'saas'
            },
            {
                'category_path': 'Business & Strategy > Analyse Financi√®re',
                'slug': 'churn-rate',
                'translations': {
                    'fr': {
                        'title': 'Churn Rate',
                        'definition': 'Taux d\'attrition - Pourcentage de clients qui cessent d\'utiliser un produit ou service sur une p√©riode donn√©e.',
                        'examples': '1000 clients d√©but mois, 50 r√©siliations : Churn = 5%. SaaS excellent < 2%/mois, acceptable < 5%/mois.',
                        'formula': 'Churn Rate = (Clients Perdus / Clients D√©but P√©riode) √ó 100'
                    }
                },
                'is_essential': True,
                'difficulty': 'intermediate',
                'context': 'saas'
            },
            
            # Tech & Data
            {
                'category_path': 'Tech & Data > Data Science & BI',
                'slug': 'kpi',
                'translations': {
                    'fr': {
                        'title': 'KPI',
                        'definition': 'Key Performance Indicator - Indicateur cl√© de performance permettant de mesurer l\'atteinte des objectifs strat√©giques d\'une organisation.',
                        'examples': 'KPI Marketing : CAC, LTV, taux conversion. KPI Sales : pipeline value, win rate. KPI Produit : DAU, r√©tention.',
                        'benchmarks': 'R√®gle : 5-7 KPI max par √©quipe, mesure mensuelle, objectifs SMART'
                    }
                },
                'is_essential': True,
                'difficulty': 'beginner',
                'context': 'analytics'
            },
            {
                'category_path': 'Tech & Data > Data Science & BI',
                'slug': 'dashboard',
                'translations': {
                    'fr': {
                        'title': 'Dashboard',
                        'definition': 'Tableau de bord visuel qui agr√®ge et pr√©sente les m√©triques et KPI essentiels d\'une activit√© en temps r√©el ou quasi-r√©el.',
                        'examples': 'Dashboard CEO : MRR, Churn, CAC/LTV, Cash. Dashboard Marketing : Leads, CPL, ROAS, Traffic. Mise √† jour temps r√©el.',
                        'benchmarks': '73% des dirigeants consultent leurs dashboards quotidiennement'
                    }
                },
                'is_essential': True,
                'difficulty': 'beginner',
                'context': 'bi'
            }
        ]
        
        for term_data in terms_data:
            self.create_term(term_data, stats, dry_run)

    def create_term(self, data, stats, dry_run):
        """Cr√©e un terme individuel avec ses traductions"""
        
        # R√©cup√©rer la cat√©gorie
        category_path_parts = data['category_path'].split(' > ')
        category_slug = slugify(category_path_parts[-1])
        
        if not dry_run:
            try:
                category = TermCategory.objects.get(slug=category_slug)
            except TermCategory.DoesNotExist:
                self.stdout.write(self.style.WARNING(f'Cat√©gorie non trouv√©e: {category_slug}'))
                return
        else:
            category = None
        
        # Cr√©er le terme
        if not dry_run:
            term, created = Term.objects.get_or_create(
                slug=data['slug'],
                defaults={
                    'category': category,
                    'is_essential': data.get('is_essential', False),
                    'difficulty_level': data.get('difficulty', 'intermediate'),
                    'is_active': True
                }
            )
        else:
            created = True
            term = None
        
        if created:
            stats['terms'] += 1
            self.stdout.write(f'  üìù {data["translations"]["fr"]["title"]}')
            
            # Cr√©er les traductions
            for lang, translation_data in data['translations'].items():
                if not dry_run:
                    TermTranslation.objects.get_or_create(
                        term=term,
                        language=lang,
                        context=data.get('context', ''),
                        defaults={
                            'title': translation_data['title'],
                            'definition': translation_data['definition'],
                            'examples': translation_data.get('examples', ''),
                            'formula': translation_data.get('formula', ''),
                            'benchmarks': translation_data.get('benchmarks', ''),
                            'sources': translation_data.get('sources', ''),
                        }
                    )
                
                stats['translations'] += 1

    def create_relations(self, stats, dry_run):
        """Cr√©e les relations entre termes"""
        
        relations_data = [
            # Relations SEO
            ('seo', 'beroas', 'related'),
            ('seo', 'serp', 'child'),
            ('seo', 'backlink', 'child'),
            
            # Relations Marketing/Sales
            ('lead', 'prospect', 'child'),
            ('prospect', 'qualification-bant', 'related'),
            ('prospect', 'pipeline-commercial', 'related'),
            
            # Relations M√©triques Business
            ('ltv', 'cac', 'related'),
            ('mrr', 'churn-rate', 'related'),
            ('cac', 'roas', 'related'),
            
            # Relations Publicit√©
            ('cpc', 'cpm', 'related'),
            ('cpc', 'roas', 'related'),
            ('roas', 'ltv', 'related'),
        ]
        
        if not dry_run:
            for from_slug, to_slug, relation_type in relations_data:
                try:
                    from_term = Term.objects.get(slug=from_slug)
                    to_term = Term.objects.get(slug=to_slug)
                    
                    TermRelation.objects.get_or_create(
                        from_term=from_term,
                        to_term=to_term,
                        relation_type=relation_type,
                        defaults={'weight': 5}
                    )
                    
                    stats['relations'] += 1
                    
                except Term.DoesNotExist:
                    continue
        else:
            stats['relations'] = len(relations_data)
        
        if stats['relations'] > 0:
            self.stdout.write(f'  üîó {stats["relations"]} relations cr√©√©es')