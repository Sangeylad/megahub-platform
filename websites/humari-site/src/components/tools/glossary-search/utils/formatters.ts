// src/components/tools/glossary-search/utils/formatters.ts
import { GlossaryTerm, TermTranslation } from '../types'

export const formatters = {
  // RÃ©cupÃ©rer la traduction principale d'un terme
  getPrimaryTranslation: (term: GlossaryTerm): TermTranslation | null => {
    return term.primary_translation || 
           term.current_translation || 
           term.translations?.[0] || 
           null
  },
  
  // Tronquer le texte avec points de suspension
  truncateText: (text: string, maxLength: number): string => {
    if (!text || text.length <= maxLength) return text
    return text.substring(0, maxLength).trim() + '...'
  },
  
  // Formater la difficultÃ© en franÃ§ais
  formatDifficulty: (difficulty: string): string => {
    const levels = {
      'beginner': 'DÃ©butant',
      'intermediate': 'IntermÃ©diaire', 
      'advanced': 'AvancÃ©'
    }
    return levels[difficulty as keyof typeof levels] || difficulty
  },
  
  // âœ… NOUVELLE FONCTION : DifficultÃ© avec emojis
  formatDifficultyWithEmoji: (level: string): string => {
    const levels: Record<string, string> = {
      'beginner': 'ðŸŸ¢ DÃ©butant',
      'dÃ©butant': 'ðŸŸ¢ DÃ©butant',
      'intermediate': 'ðŸŸ¡ IntermÃ©diaire', 
      'intermÃ©diaire': 'ðŸŸ¡ IntermÃ©diaire',
      'advanced': 'ðŸ”´ AvancÃ©',
      'avancÃ©': 'ðŸ”´ AvancÃ©',
      'expert': 'âš« Expert'
    }
    return levels[level.toLowerCase()] || `ðŸ“š ${level}`
  },
  
  // URL pour les termes
  getTermUrl: (term: GlossaryTerm): string => {
    return `/glossaire/definition-${term.slug}/`
  },
  
  // Formater le score de popularitÃ©
  formatPopularityScore: (score: number): string => {
    if (score >= 1000) return `${Math.round(score / 100) / 10}k`
    return score.toString()
  },
  
  // Highlighting des rÃ©sultats de recherche
  highlightSearchTerm: (text: string, searchTerm: string): string => {
    if (!searchTerm || !text) return text
    
    const regex = new RegExp(`(${searchTerm})`, 'gi')
    return text.replace(regex, '<mark>$1</mark>')
  },
  
  // Extraire le nom d'affichage d'un terme
  getDisplayTitle: (term: GlossaryTerm): string => {
    const translation = formatters.getPrimaryTranslation(term)
    return translation?.title || term.title || 'Terme sans titre'
  },
  
  // Extraire la dÃ©finition d'affichage
  getDisplayDefinition: (term: GlossaryTerm): string => {
    const translation = formatters.getPrimaryTranslation(term)
    return translation?.definition || term.definition || ''
  },
  
  // Extraire les exemples d'affichage
  getDisplayExamples: (term: GlossaryTerm): string => {
    const translation = formatters.getPrimaryTranslation(term)
    return translation?.examples || term.examples || ''
  }
}